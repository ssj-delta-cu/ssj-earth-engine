var collections = {
  ucdpt:{ic:ee.ImageCollection('users/ucd-cws-ee-data/ssj-delta-cu/ssj-ucd-priestley-taylor/et_daily'), units:1},
  ucdmetric:{ic:ee.ImageCollection('users/ucd-cws-ee-data/ssj-delta-cu/ssj-ucd-metric/et_landsat'), units:0.1},
  itrc:{ic:ee.ImageCollection('users/ucd-cws-ee-data/ssj-delta-cu/ssj-itrc-metric/et_daily'), units:10},
  sims:{ic:ee.ImageCollection('users/ucd-cws-ee-data/ssj-delta-cu/ssj-sims/et_daily'), units:0.1},
  disalexi:{ic:ee.ImageCollection('users/ucd-cws-ee-data/ssj-delta-cu/ssj-disalexi/et_daily_output_corr'), units:0.1},
};

// fusion table with the 3x3 grid around the 2016 fieldstation points 
var station_points_3x3 = ee.FeatureCollection('ft:1ZGZRl8zMoyLpsf6s1d8NsxNq0DCDS_BNldFPZvUV').select(["Station_ID", "Crop"]);
  

var testimg = ee.Image(collections.ucdmetric.ic.first());
print(testimg);

print(testimg.date().format('y-M-d'));



/*
images = ee.ImageCollection(...).filter(...)
results = ee.FeatureCollection(
    images.map(function(img) {
        return img.reduceRegions(featureCollection, ...);
    }))
results = results.flatten();
*/

var ic = collections.ucdmetric.ic;
print(ic);



var reduce_img = function(img){
    return img.reduceRegions({
      collection: station_points_3x3,
      reducer: GroupedStatReducers,
      scale: 30,
    });
};


var ic_results = ic.map(reduceIMG);


var results = ee.FeatureCollection(ic_results);
  
print(results);


// empty list to store collections from reducer
var coll = [];


var reduceIMG = function(image){

  // Grouped reducer for mean/median/quartiles/count
  var GroupedStatReducers = ee.Reducer.mean()
    .combine(ee.Reducer.minMax(), "", true)
    .combine(ee.Reducer.count(), "", true)
    .combine(ee.Reducer.stdDev(), "", true);
  
  
  var reduce_polygons = function(image){
    // reduce regions at all the points in the feature collection
    var red_features = image.reduceRegions({
      collection: station_points_3x3,
      reducer: GroupedStatReducers,
      scale: 30,
    });
    return(red_features);
  };

  // get the image date
  var d = image.date().format('y-M-d');

  // add a new property called method to a feature
  var setdate = function(feature){
    feature = feature.set('date', d);
    return feature;
  };

  var e = reduce_polygons(image);
  e = e.map(setdate);
  //coll.push(e);
  return e;
};



/*
// pull a single date from a image collection and convert units
var datefromIC = function(imagecollection, date){
  var filter = imagecollection.ic.filterDate(date);
  var image_at_date = filter.first();
  var image_in_mm = ee.Image(image_at_date).multiply(imagecollection.units);
  return ee.Image(image_in_mm);
};



var overpass_dates = ['2016-05-26', '2016-06-27', '2016-07-13', '2016-07-29', '2016-08-14', '2016-09-15'];

/*
for(var d in overpass_dates){
  print(overpass_dates[d]);
  var f = pt.filterDate(overpass_dates[d]);
  print(f);
  print(f.size());
}




// add a new property called method to a feature
var setmodel = function(feature){
  feature = feature.set('model', model_name);
  feature = feature.set('date', date);
  return feature;
};

for (var key in collections) {
  var model_name = key;
  print(model_name);
  for(var d in overpass_dates) {
    var date=overpass_dates[d];
    var image_for_date = datefromIC(collections[key], date);
    var e = reduce_polygons(image_for_date, station_points_3x3);
    e = e.map(setmodel);
  coll.push(e);
  }
}

// merge all the models into a single feature collection
var merge_holder = null;
for(var i=1;i<coll.length;i++){
  if(i==1){
    merge_holder = coll[0].merge(coll[i]);
  }
  else{
    merge_holder = merge_holder.merge(coll[i]);
  }
}

print(merge_holder);  


Export.table.toDrive(merge_holder, 'fieldstation_grid_daily', "ET_comparisons_geojson", 'fieldstation_grid_daily', "GeoJSON");
*/