// fusion table with the 3x3 grid around the 2016 fieldstation points 
var station_points_3x3 = ee.FeatureCollection('ft:1ZGZRl8zMoyLpsf6s1d8NsxNq0DCDS_BNldFPZvUV');



// Grouped reducer for mean/median/quartiles/count
var GroupedStatReducers = ee.Reducer.mean()
  .combine(ee.Reducer.minMax(), "", true)
  .combine(ee.Reducer.count(), "", true)
  .combine(ee.Reducer.stdDev(), "", true);


var reduce_polygon = function(image, polygon){
  // reduce regions at all the points in the feature collection
  var MeanFeatures = image.reduceRegions({
    collection: polygon,
    reducer: GroupedStatReducers,
    scale: 30,
  });
  return(MeanFeatures);
};




// loop through all the et sources, calc stats for the station
var station_stats = function(wateryear){
  var methods = select_water_year(wateryear).methods;

  // empty list to store collections from reducer
  var coll = [];
  
  // add a new property called method to a feature
  var setmodel = function(feature){
    feature = feature.set('model', model_name);
    feature = feature.set('water_year', wateryear);
    return feature;
  };

  for (var key in methods) {
    var model_name = key;
    var e =  reduce_polygon(methods[key].image, station_points_3x3);
    e = e.map(setmodel);
    coll.push(e);
  }
  
  // merge all the models into a single feature collection
  var merge_holder = null;
  for(var i=1;i<coll.length;i++){
    if(i==1){
      merge_holder = coll[0].merge(coll[i]);
    }
    else{
      merge_holder = merge_holder.merge(coll[i]);
    }
  }
  return(merge_holder);
};

/*

var grid_2015 = station_stats(2015);
var grid_2016 = station_stats(2016);

var grid_data = grid_2015.merge(grid_2016);
print(grid_data);
Export.table.toDrive(grid_data, 'fieldstation_grid_monthly', "ET_comparisons_geojson", 'fieldstation_grid_monthly', "GeoJSON");
*/